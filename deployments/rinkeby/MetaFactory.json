{
  "address": "0x2893E2f55284fCb7f84C42dd0E5637958aD650c9",
  "abi": [
    {
      "inputs": [],
      "name": "FactoryCallFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidModuleAddressToPass",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnequalArrayLengths",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "dao",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "accessControl",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "modules",
          "type": "address[]"
        }
      ],
      "name": "DAOAndModulesCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "daoFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "metaFactoryTempRoleIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "daoImplementation",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "daoFactory",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "accessControlImplementation",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "daoName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "roles",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "rolesAdmins",
              "type": "string[]"
            },
            {
              "internalType": "address[][]",
              "name": "members",
              "type": "address[][]"
            },
            {
              "internalType": "string[]",
              "name": "daoFunctionDescs",
              "type": "string[]"
            },
            {
              "internalType": "string[][]",
              "name": "daoActionRoles",
              "type": "string[][]"
            }
          ],
          "internalType": "struct IDAOFactory.CreateDAOParams",
          "name": "createDAOParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "factory",
              "type": "address"
            },
            {
              "internalType": "bytes[]",
              "name": "data",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "newContractAddressesToPass",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "addressesReturned",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMetaFactory.ModuleFactoryCallData[]",
          "name": "moduleFactoriesCallData",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "contractIndexes",
              "type": "uint256[]"
            },
            {
              "internalType": "string[]",
              "name": "functionDescs",
              "type": "string[]"
            },
            {
              "internalType": "string[][]",
              "name": "roles",
              "type": "string[][]"
            }
          ],
          "internalType": "struct IMetaFactory.ModuleActionData",
          "name": "moduleActionData",
          "type": "tuple"
        },
        {
          "internalType": "uint256[][]",
          "name": "roleModuleMembers",
          "type": "uint256[][]"
        }
      ],
      "name": "createDAOAndModules",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x487b7dfcfd0c1052c40db2706b341585b44f956978bb9da74a831b6b7a0d735f",
  "receipt": {
    "to": null,
    "from": "0x3179e4949433EF3E2F78A5fFF26EfE51BBd5ae02",
    "contractAddress": "0x2893E2f55284fCb7f84C42dd0E5637958aD650c9",
    "transactionIndex": 10,
    "gasUsed": "1707791",
    "logsBloom": "0x
    "blockHash": "0x14847b244194c1b08c4997a96974ef27c12a9da37d0db111ccb69a98590741ae",
    "transactionHash": "0x487b7dfcfd0c1052c40db2706b341585b44f956978bb9da74a831b6b7a0d735f",
    "logs": [],
    "blockNumber": 10745438,
    "cumulativeGasUsed": "3256862",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1f52ca17201a655762e0017366cd54f4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FactoryCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidModuleAddressToPass\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnequalArrayLengths\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accessControl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"modules\",\"type\":\"address[]\"}],\"name\":\"DAOAndModulesCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"daoFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"metaFactoryTempRoleIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"daoImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daoFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accessControlImplementation\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"daoName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"roles\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"rolesAdmins\",\"type\":\"string[]\"},{\"internalType\":\"address[][]\",\"name\":\"members\",\"type\":\"address[][]\"},{\"internalType\":\"string[]\",\"name\":\"daoFunctionDescs\",\"type\":\"string[]\"},{\"internalType\":\"string[][]\",\"name\":\"daoActionRoles\",\"type\":\"string[][]\"}],\"internalType\":\"struct IDAOFactory.CreateDAOParams\",\"name\":\"createDAOParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"newContractAddressesToPass\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"addressesReturned\",\"type\":\"uint256\"}],\"internalType\":\"struct IMetaFactory.ModuleFactoryCallData[]\",\"name\":\"moduleFactoriesCallData\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"contractIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"functionDescs\",\"type\":\"string[]\"},{\"internalType\":\"string[][]\",\"name\":\"roles\",\"type\":\"string[][]\"}],\"internalType\":\"struct IMetaFactory.ModuleActionData\",\"name\":\"moduleActionData\",\"type\":\"tuple\"},{\"internalType\":\"uint256[][]\",\"name\":\"roleModuleMembers\",\"type\":\"uint256[][]\"}],\"name\":\"createDAOAndModules\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createDAOAndModules(address,uint256,(address,address,address,string,string[],string[],address[][],string[],string[][]),(address,bytes[],uint256,uint256[],uint256)[],(uint256[],string[],string[][]),uint256[][])\":{\"params\":{\"createDAOParams\":\"The struct of parameters used for creating the DAO and Access Control contracts\",\"daoFactory\":\"The address of the DAO factory\",\"metaFactoryTempRoleIndex\":\"The index of which role specified in createDAOParams should be temporarily given to the MetaFactory\",\"moduleActionData\":\"Struct of functionDescs and roles to setup for each newly created module\",\"moduleFactoriesCallData\":\"The calldata required for each module factory call\",\"roleModuleMembers\":\"Array of which newly created modules should be given each role\"},\"returns\":{\"_0\":\"Array of addresses of the newly created modules\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"An interface ID bytes4 as defined by ERC-165\"},\"returns\":{\"_0\":\"bool Indicates whether the interface is supported\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createDAOAndModules(address,uint256,(address,address,address,string,string[],string[],address[][],string[],string[][]),(address,bytes[],uint256,uint256[],uint256)[],(uint256[],string[],string[][]),uint256[][])\":{\"notice\":\"Creates a DAO, Access Control, and any modules specified\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether a given interface ID is supported\"}},\"notice\":\"A factory contract for deploying DAOs along with any desired modules within one transaction\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MetaFactory.sol\":\"MetaFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@fractal-framework/core-contracts/contracts/interfaces/IAccessControlDAO.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IAccessControlDAO {\\r\\n    struct RoleData {\\r\\n        mapping(address => bool) members;\\r\\n        string adminRole;\\r\\n    }\\r\\n\\r\\n    error UnequalArrayLengths();\\r\\n    error MissingRole(address account, string role);\\r\\n    error OnlySelfRenounce();\\r\\n\\r\\n    event ActionRoleAdded(\\r\\n        address target,\\r\\n        string functionDesc,\\r\\n        bytes4 encodedSig,\\r\\n        string role\\r\\n    );\\r\\n    event ActionRoleRemoved(\\r\\n        address target,\\r\\n        string functionDesc,\\r\\n        bytes4 encodedSig,\\r\\n        string role\\r\\n    );\\r\\n    event RoleAdminChanged(\\r\\n        string role,\\r\\n        string previousAdminRole,\\r\\n        string adminRole\\r\\n    );\\r\\n    event RoleGranted(string role, address account, address admin);\\r\\n    event RoleRevoked(string role, address account, address admin);\\r\\n\\r\\n    /// @notice Initialize DAO action and role permissions\\r\\n    /// @param dao Address to receive DAO role\\r\\n    /// @param roles What permissions are assigned to\\r\\n    /// @param roleAdmins Roles which have the ability to remove or add members\\r\\n    /// @param members Addresses to be granted the specified roles\\r\\n    /// @param targets Contract addresses for actions to be defined on\\r\\n    /// @param functionDescs Function descriptions used to define actions\\r\\n    /// @param actionRoles Roles being granted permission for an action\\r\\n    function initialize(\\r\\n        address dao,\\r\\n        string[] memory roles,\\r\\n        string[] memory roleAdmins,\\r\\n        address[][] memory members,\\r\\n        address[] memory targets,\\r\\n        string[] memory functionDescs,\\r\\n        string[][] memory actionRoles\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Grants roles to the specified addresses and defines admin roles\\r\\n    /// @param roles The roles being granted\\r\\n    /// @param roleAdmins The roles being granted as admins of the specified of roles\\r\\n    /// @param members Addresses being granted each specified role\\r\\n    function grantRolesAndAdmins(\\r\\n        string[] memory roles,\\r\\n        string[] memory roleAdmins,\\r\\n        address[][] memory members\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Grants roles to the specified addresses\\r\\n    /// @param roles The roles being granted\\r\\n    /// @param members Addresses being granted each specified role\\r\\n    function grantRoles(string[] memory roles, address[][] memory members)\\r\\n        external;\\r\\n\\r\\n    /// @notice Grants a role to the specified address\\r\\n    /// @param role The role being granted\\r\\n    /// @param account The address being granted the specified role\\r\\n    function grantRole(string memory role, address account) external;\\r\\n\\r\\n    /// @notice Revokes a role from the specified address\\r\\n    /// @param role The role being revoked\\r\\n    /// @param account The address the role is being revoked from\\r\\n    function revokeRole(string memory role, address account) external;\\r\\n\\r\\n    /// @notice Enables an address to remove one of its own roles\\r\\n    /// @param role The role being renounced\\r\\n    /// @param account The address renouncing the role\\r\\n    function renounceRole(string memory role, address account) external;\\r\\n\\r\\n    /// @notice Authorizes roles to execute the specified actions\\r\\n    /// @param targets The contract addresses that the action functions are implemented on\\r\\n    /// @param functionDescs The function descriptions used to define the actions\\r\\n    /// @param roles Roles being granted permission for an action\\r\\n    function addActionsRoles(\\r\\n        address[] memory targets,\\r\\n        string[] memory functionDescs,\\r\\n        string[][] memory roles\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Removes autorization for roles to execute the specified actions\\r\\n    /// @param targets The contract addresses that the action functions are implemented on\\r\\n    /// @param functionDescs The function description used to define the actions\\r\\n    /// @param roles Roles that action permissions are being removed on\\r\\n    function removeActionsRoles(\\r\\n        address[] memory targets,\\r\\n        string[] memory functionDescs,\\r\\n        string[][] memory roles\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Checks if a caller has the permissions to execute the specific action\\r\\n    /// @param caller Address attempting to execute the action\\r\\n    /// @param target Contract address corresponding to the action\\r\\n    /// @param sig The function signature used to define the action\\r\\n    function actionIsAuthorized(\\r\\n        address caller,\\r\\n        address target,\\r\\n        bytes4 sig\\r\\n    ) external view returns (bool isAuthorized);\\r\\n\\r\\n    /// @notice Returns the roles autorized to execute the specified action\\r\\n    /// @param target Contract address corresponding to the action\\r\\n    /// @param functionDesc The function description used to define the action\\r\\n    function getActionRoles(address target, string memory functionDesc)\\r\\n        external\\r\\n        view\\r\\n        returns (string[] memory roles);\\r\\n\\r\\n    /// @notice Checks if a specific role is authorized for an action\\r\\n    /// @param role Role that authorization is being checked on\\r\\n    /// @param target Contract address corresponding to the action\\r\\n    /// @param functionDesc Function description used to define the action\\r\\n    /// @return isAuthorized Indicates whether the role is authorized to execute the action\\r\\n    function isRoleAuthorized(\\r\\n        string calldata role,\\r\\n        address target,\\r\\n        string memory functionDesc\\r\\n    ) external view returns (bool isAuthorized);\\r\\n\\r\\n    /// @notice Returns whether the account has been granted the role\\r\\n    /// @param role Role that authorization is being checked on\\r\\n    /// @param account Address that the role authorization is being check on\\r\\n    /// @return boolean Indicates whether the address has been granted the role\\r\\n    function hasRole(string memory role, address account)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    /// @notice Returns the role that is the admin of the specified role\\r\\n    /// @param role Role that the admin role is being returned for\\r\\n    /// @return string The admin role of the specified role\\r\\n    function getRoleAdmin(string memory role)\\r\\n        external\\r\\n        view\\r\\n        returns (string memory);\\r\\n\\r\\n    /// @return string The string \\\"DAO_ROLE\\\"\\r\\n    function DAO_ROLE() external view returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x4cd9cebbcbd322463447f2758ee221103ef70fa1c6f5a2a821006bd44c38e60b\",\"license\":\"Unlicense\"},\"@fractal-framework/core-contracts/contracts/interfaces/IDAO.sol\":{\"content\":\"import \\\"./IModuleBase.sol\\\";\\r\\n\\r\\n//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IDAO {\\r\\n    error Unauthorized(bytes32 role, address account);\\r\\n    error UnequalArrayLengths();\\r\\n\\r\\n    event Executed(address[] targets, uint256[] values, bytes[] calldatas);\\r\\n\\r\\n    /// @notice Function for initializing the Dao\\r\\n    /// @param _accessControl The address of the access control contract\\r\\n    /// @param _moduleFactoryBase The address of the module factory\\r\\n    /// @param _name Name of the Dao\\r\\n    function initialize(address _accessControl, address _moduleFactoryBase, string calldata _name) external;\\r\\n\\r\\n    /// @notice A function for executing function calls from the DAO\\r\\n    /// @param targets An array of addresses to target for the function calls\\r\\n    /// @param values An array of ether values to send with the function calls\\r\\n    /// @param calldatas An array of bytes defining the function calls\\r\\n    function execute(\\r\\n        address[] calldata targets,\\r\\n        uint256[] calldata values,\\r\\n        bytes[] calldata calldatas\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xde251957b9ac86a2b7ff3d345f2b6456b4e6237049000f02d0652c3ee42c3c3b\",\"license\":\"Unlicense\"},\"@fractal-framework/core-contracts/contracts/interfaces/IDAOFactory.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IDAOFactory {\\r\\n    struct CreateDAOParams {\\r\\n        address daoImplementation;\\r\\n        address daoFactory;\\r\\n        address accessControlImplementation;\\r\\n        string daoName;\\r\\n        string[] roles;\\r\\n        string[] rolesAdmins;\\r\\n        address[][] members;\\r\\n        string[] daoFunctionDescs;\\r\\n        string[][] daoActionRoles;\\r\\n    }\\r\\n\\r\\n    event DAOCreated(address indexed daoAddress, address indexed accessControl, address indexed sender, address creator);\\r\\n\\r\\n    /// @notice Creates a DAO with an access control contract\\r\\n    /// @param creator Address of the Dao Creator\\r\\n    /// @param createDAOParams Struct of all the parameters required to create a DAO\\r\\n    /// @return dao The address of the deployed DAO proxy contract\\r\\n    /// @return accessControl The address of the deployed access control proxy contract\\r\\n    function createDAO(address creator, CreateDAOParams calldata createDAOParams)\\r\\n        external\\r\\n        returns (address, address);\\r\\n}\\r\\n\",\"keccak256\":\"0x0d6109f84c9a0e9ac61cd5be65ac9dd64e8a58a4dc95aee70310f2608778e2b7\",\"license\":\"Unlicense\"},\"@fractal-framework/core-contracts/contracts/interfaces/IModuleBase.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IAccessControlDAO.sol\\\";\\r\\n\\r\\ninterface IModuleBase {\\r\\n    error NotAuthorized();\\r\\n\\r\\n    /// @return IAccessControlDAO The Access control interface\\r\\n    function accessControl() external view returns (IAccessControlDAO);\\r\\n\\r\\n    /// @notice Returns whether a given interface ID is supported\\r\\n    /// @param interfaceId An interface ID bytes4 as defined by ERC-165\\r\\n    /// @return bool Indicates whether the interface is supported\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n\\r\\n    /// @return string The string \\\"Name\\\"\\r\\n    function name() external view returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x9c68d25cc83e136c0766a0f3ed9676b173a67704de95db8a47f2e7ef77d645ff\",\"license\":\"Unlicense\"},\"@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotesUpgradeable {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe8e2d2f70db1913260634f710cc057d669b06eccf4dca27e18b79c3bbb101da6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0x6309f9f39dc6f4f45a24f296543867aa358e32946cd6b2874627a996d606b3a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MetaFactory.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IMetaFactory.sol\\\";\\r\\nimport \\\"@fractal-framework/core-contracts/contracts/interfaces/IDAO.sol\\\";\\r\\nimport \\\"@fractal-framework/core-contracts/contracts/interfaces/IAccessControlDAO.sol\\\";\\r\\n\\r\\n/// @notice A factory contract for deploying DAOs along with any desired modules within one transaction\\r\\ncontract MetaFactory is IMetaFactory, ERC165 {\\r\\n    /// @notice Creates a DAO, Access Control, and any modules specified\\r\\n    /// @param daoFactory The address of the DAO factory\\r\\n    /// @param metaFactoryTempRoleIndex The index of which role specified in createDAOParams should be temporarily given to the MetaFactory\\r\\n    /// @param createDAOParams The struct of parameters used for creating the DAO and Access Control contracts\\r\\n    /// @param moduleFactoriesCallData The calldata required for each module factory call\\r\\n    /// @param moduleActionData Struct of functionDescs and roles to setup for each newly created module\\r\\n    /// @param roleModuleMembers Array of which newly created modules should be given each role\\r\\n    /// @return Array of addresses of the newly created modules\\r\\n    function createDAOAndModules(\\r\\n        address daoFactory,\\r\\n        uint256 metaFactoryTempRoleIndex,\\r\\n        IDAOFactory.CreateDAOParams memory createDAOParams,\\r\\n        ModuleFactoryCallData[] memory moduleFactoriesCallData,\\r\\n        ModuleActionData memory moduleActionData,\\r\\n        uint256[][] memory roleModuleMembers\\r\\n    ) external returns (address[] memory) {\\r\\n        if (\\r\\n            moduleActionData.contractIndexes.length !=\\r\\n            moduleActionData.functionDescs.length ||\\r\\n            moduleActionData.contractIndexes.length !=\\r\\n            moduleActionData.roles.length ||\\r\\n            createDAOParams.roles.length != roleModuleMembers.length\\r\\n        ) {\\r\\n            revert UnequalArrayLengths();\\r\\n        }\\r\\n\\r\\n        uint256 modulesLength = moduleFactoriesCallData.length;\\r\\n\\r\\n        // Get the number of new module addresses to be created\\r\\n        uint256 newContractAddressesLength = 2;\\r\\n        for (uint256 i; i < modulesLength; ) {\\r\\n            newContractAddressesLength += moduleFactoriesCallData[i]\\r\\n                .addressesReturned;\\r\\n\\r\\n            unchecked {\\r\\n                i++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        address[] memory newContractAddresses = new address[](\\r\\n            newContractAddressesLength\\r\\n        );\\r\\n\\r\\n        // Give this contract a temporary role so it can execute through the DAO\\r\\n        uint256 tempRoleMembersLength = createDAOParams\\r\\n            .members[metaFactoryTempRoleIndex]\\r\\n            .length;\\r\\n        address[] memory tempRoleNewMembers = new address[](\\r\\n            tempRoleMembersLength + 1\\r\\n        );\\r\\n\\r\\n        for (uint256 i; i < tempRoleMembersLength; ) {\\r\\n            tempRoleNewMembers[i] = createDAOParams.members[\\r\\n                metaFactoryTempRoleIndex\\r\\n            ][i];\\r\\n            unchecked {\\r\\n                i++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        tempRoleNewMembers[tempRoleMembersLength] = address(this);\\r\\n\\r\\n        createDAOParams.members[metaFactoryTempRoleIndex] = tempRoleNewMembers;\\r\\n\\r\\n\\r\\n        // Create the DAO and Access Control contracts\\r\\n        (address dao, address accessControl) = IDAOFactory(daoFactory)\\r\\n            .createDAO(msg.sender, createDAOParams);\\r\\n\\r\\n        newContractAddresses[0] = dao;\\r\\n        newContractAddresses[1] = accessControl;\\r\\n\\r\\n        // Create the DAO modules\\r\\n        newContractAddresses = createModules(newContractAddresses, moduleFactoriesCallData);\\r\\n\\r\\n        addActionsRoles(moduleActionData, newContractAddresses);\\r\\n\\r\\n        addModuleRoles(\\r\\n            createDAOParams.roles,\\r\\n            roleModuleMembers,\\r\\n            newContractAddresses\\r\\n        );\\r\\n\\r\\n        // Renounce the MetaFactory temporary role\\r\\n        IAccessControlDAO(newContractAddresses[1]).renounceRole(\\r\\n            createDAOParams.roles[metaFactoryTempRoleIndex],\\r\\n            address(this)\\r\\n        );\\r\\n\\r\\n        // Create array of created module addresses to emit in event\\r\\n        address[] memory moduleAddresses = new address[](\\r\\n            newContractAddresses.length - 2\\r\\n        );\\r\\n        for (uint256 i; i < moduleAddresses.length; ) {\\r\\n            moduleAddresses[i] = newContractAddresses[i + 2];\\r\\n\\r\\n            unchecked {\\r\\n                i++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit DAOAndModulesCreated(\\r\\n            newContractAddresses[0],\\r\\n            newContractAddresses[1],\\r\\n            moduleAddresses\\r\\n        );\\r\\n\\r\\n        return newContractAddresses;\\r\\n    }\\r\\n\\r\\n    /// @notice Creates each new module contract\\r\\n    /// @param newContractAddresses The incomplete array of new contract addresses\\r\\n    /// @param moduleFactoriesCallData The calldata required for each module factory call\\r\\n    /// @return The newContractAddresses array updated with new addresses from modules creation\\r\\n    function createModules(\\r\\n        address[] memory newContractAddresses,\\r\\n        ModuleFactoryCallData[] memory moduleFactoriesCallData\\r\\n    ) private returns (address[] memory) {\\r\\n        uint256 newContractAddressIndex = 2;\\r\\n\\r\\n        // Loop through each module to be created\\r\\n        for (uint256 i; i < moduleFactoriesCallData.length;) {\\r\\n            uint256 newContractAddressesToPassLength = moduleFactoriesCallData[\\r\\n                i\\r\\n            ].newContractAddressesToPass.length;\\r\\n\\r\\n            bytes[] memory newData = new bytes[](\\r\\n                moduleFactoriesCallData[i].data.length +\\r\\n                    newContractAddressesToPassLength\\r\\n            );\\r\\n\\r\\n            // Add new contract addresses to module calldata\\r\\n            for (uint256 j; j < newContractAddressesToPassLength;) {\\r\\n                if (\\r\\n                    moduleFactoriesCallData[i].newContractAddressesToPass[j] >=\\r\\n                    i + 2\\r\\n                ) {\\r\\n                    revert InvalidModuleAddressToPass();\\r\\n                }\\r\\n\\r\\n                // Encode the new contract address into bytes\\r\\n                newData[j] = abi.encode(\\r\\n                    newContractAddresses[\\r\\n                        moduleFactoriesCallData[i].newContractAddressesToPass[j]\\r\\n                    ]\\r\\n                );\\r\\n\\r\\n                unchecked {\\r\\n                    j++;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // Fill in the new bytes array with the old bytes array parameters\\r\\n            for (uint256 j; j < moduleFactoriesCallData[i].data.length; ) {\\r\\n                newData[\\r\\n                    j + newContractAddressesToPassLength\\r\\n                ] = moduleFactoriesCallData[i].data[j];\\r\\n\\r\\n                unchecked {\\r\\n                    j++;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // Call the module factory with the new calldata\\r\\n            (bool success, bytes memory returnData) = moduleFactoriesCallData[i]\\r\\n                .factory\\r\\n                .call{value: moduleFactoriesCallData[i].value}(\\r\\n                abi.encodeWithSignature(\\\"create(bytes[])\\\", newData)\\r\\n            );\\r\\n\\r\\n            if (!success) {\\r\\n                revert FactoryCallFailed();\\r\\n            }\\r\\n\\r\\n            // Create an array of the returned module addresses\\r\\n            address[] memory newModuleAddresses = new address[](moduleFactoriesCallData[i].addressesReturned);\\r\\n            newModuleAddresses = abi.decode(returnData, (address[]));\\r\\n\\r\\n            // Add the new module addresses to the new contract addresses array\\r\\n            for(uint256 j; j < newModuleAddresses.length;) {\\r\\n              newContractAddresses[newContractAddressIndex] = newModuleAddresses[j];\\r\\n              unchecked {\\r\\n                newContractAddressIndex++;\\r\\n                j++;\\r\\n              }\\r\\n            }\\r\\n           \\r\\n            unchecked {\\r\\n                i++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return newContractAddresses;\\r\\n    }\\r\\n\\r\\n    /// @notice Adds the roles and functionDescs for each newly created contract\\r\\n    /// @param moduleActionData Struct of functionDescs and roles to setup for each newly created module\\r\\n    /// @param newContractAddresses The array of new contract addresses\\r\\n    function addActionsRoles(\\r\\n        ModuleActionData memory moduleActionData,\\r\\n        address[] memory newContractAddresses\\r\\n    ) private {\\r\\n        uint256 moduleActionTargetsLength = moduleActionData\\r\\n            .contractIndexes\\r\\n            .length;\\r\\n\\r\\n        // Create address array of modules to be targeted\\r\\n        address[] memory moduleActionTargets = new address[](\\r\\n            moduleActionTargetsLength\\r\\n        );\\r\\n        for (uint256 i; i < moduleActionTargetsLength; ) {\\r\\n            moduleActionTargets[i] = newContractAddresses[\\r\\n                moduleActionData.contractIndexes[i]\\r\\n            ];\\r\\n\\r\\n            unchecked {\\r\\n                i++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        bytes memory data = abi.encodeWithSignature(\\r\\n            \\\"addActionsRoles(address[],string[],string[][])\\\",\\r\\n            moduleActionTargets,\\r\\n            moduleActionData.functionDescs,\\r\\n            moduleActionData.roles\\r\\n        );\\r\\n\\r\\n        address[] memory targetArray = new address[](1);\\r\\n        uint256[] memory valuesArray = new uint256[](1);\\r\\n        bytes[] memory dataArray = new bytes[](1);\\r\\n\\r\\n        // Target array contains just the access control contract address\\r\\n        targetArray[0] = newContractAddresses[1];\\r\\n        valuesArray[0] = 0;\\r\\n        dataArray[0] = data;\\r\\n\\r\\n        // Execute the addActionRoles function on Access Control by calling through the DAO\\r\\n        IDAO(newContractAddresses[0]).execute(\\r\\n            targetArray,\\r\\n            valuesArray,\\r\\n            dataArray\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Grants roles to the modules specified\\r\\n    /// @param roles The array of roles to be granted to modules\\r\\n    /// @param roleModuleMembers Indexes of the modules to be granted each role\\r\\n    /// @param newContractAddresses Array of addresses of the newly created contracts\\r\\n    function addModuleRoles(\\r\\n        string[] memory roles,\\r\\n        uint256[][] memory roleModuleMembers,\\r\\n        address[] memory newContractAddresses\\r\\n    ) private {     \\r\\n        uint256 newMembersLength = roleModuleMembers.length;\\r\\n        address[][] memory newMembers = new address[][](newMembersLength);\\r\\n        for (uint256 i; i < newMembersLength; ) {\\r\\n            uint256 newMembersInnerLength = roleModuleMembers[i].length;\\r\\n            address[] memory newMembersInner = new address[](newMembersInnerLength);\\r\\n            for (uint256 j; j < newMembersInnerLength; ) {\\r\\n                newMembersInner[j] = newContractAddresses[\\r\\n                    roleModuleMembers[i][j]\\r\\n                ];\\r\\n                unchecked {\\r\\n                    j++;\\r\\n                }\\r\\n            }\\r\\n            newMembers[i] = newMembersInner;\\r\\n            unchecked {\\r\\n                i++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        bytes memory data = abi.encodeWithSignature(\\r\\n            \\\"grantRoles(string[],address[][])\\\",\\r\\n            roles,\\r\\n            newMembers\\r\\n        );\\r\\n\\r\\n        address[] memory targetArray = new address[](1);\\r\\n        uint256[] memory valuesArray = new uint256[](1);\\r\\n        bytes[] memory dataArray = new bytes[](1);\\r\\n\\r\\n        targetArray[0] = newContractAddresses[1];\\r\\n        valuesArray[0] = 0;\\r\\n        dataArray[0] = data;\\r\\n\\r\\n        IDAO(newContractAddresses[0]).execute(\\r\\n            targetArray,\\r\\n            valuesArray,\\r\\n            dataArray\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Returns whether a given interface ID is supported\\r\\n    /// @param interfaceId An interface ID bytes4 as defined by ERC-165\\r\\n    /// @return bool Indicates whether the interface is supported\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceId == type(IMetaFactory).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9165360260e2ca8f24e1231d64042ecd212ca2e680b2a443f63c05caf17ba2c6\",\"license\":\"Unlicense\"},\"contracts/interfaces/IMetaFactory.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@fractal-framework/core-contracts/contracts/interfaces/IDAOFactory.sol\\\";\\r\\n\\r\\ninterface IMetaFactory {\\r\\n    event DAOAndModulesCreated(\\r\\n        address dao,\\r\\n        address accessControl,\\r\\n        address[] modules\\r\\n    );\\r\\n\\r\\n    error UnequalArrayLengths();\\r\\n    error InvalidModuleAddressToPass();\\r\\n    error FactoryCallFailed();\\r\\n\\r\\n    struct ModuleFactoryCallData {\\r\\n        address factory;\\r\\n        bytes[] data;\\r\\n        uint256 value;\\r\\n        uint256[] newContractAddressesToPass;\\r\\n        uint256 addressesReturned;\\r\\n    }\\r\\n\\r\\n    struct ModuleActionData {\\r\\n        uint256[] contractIndexes;\\r\\n        string[] functionDescs;\\r\\n        string[][] roles;\\r\\n    }\\r\\n\\r\\n    /// @notice A factory contract for deploying DAOs along with any desired modules within one transaction\\r\\n    /// @param daoFactory The address of the DAO factory\\r\\n    /// @param metaFactoryTempRoleIndex The index of which role specified in createDAOParams should be temporarily given to the MetaFactory\\r\\n    /// @param createDAOParams The struct of parameters used for creating the DAO and Access Control contracts\\r\\n    /// @param moduleFactoriesCallData The calldata required for each module factory call\\r\\n    /// @param moduleActionData Struct of functionDescs and roles to setup for each newly created module\\r\\n    /// @param roleModuleMembers Array of which newly created modules should be given each role\\r\\n    /// @return Array of addresses of the newly created modules\\r\\n    function createDAOAndModules(\\r\\n        address daoFactory,\\r\\n        uint256 metaFactoryTempRoleIndex,\\r\\n        IDAOFactory.CreateDAOParams memory createDAOParams,\\r\\n        ModuleFactoryCallData[] memory moduleFactoriesCallData,\\r\\n        ModuleActionData memory moduleActionData,\\r\\n        uint256[][] memory roleModuleMembers\\r\\n    ) external returns (address[] memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x71db3bfbce8c6561fb6015755cb28eb65bc8410b1ead846ed4d2a41c2b3eafb0\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611dee806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806301ffc9a71461003b578063304a83ee14610063575b600080fd5b61004e610049366004610fa3565b610083565b60405190151581526020015b60405180910390f35b610076610071366004611782565b6100ba565b60405161005a919061188b565b60006001600160e01b0319821663182541f760e11b14806100b457506301ffc9a760e01b6001600160e01b03198316145b92915050565b6020820151518251516060911415806100da575060408301515183515114155b806100eb5750815185608001515114155b15610109576040516311e86f7360e01b815260040160405180910390fd5b8351600260005b8281101561014b5786818151811061012a5761012a61189e565b6020026020010151608001518261014191906118ca565b9150600101610110565b506000816001600160401b0381111561016657610166610ffc565b60405190808252806020026020018201604052801561018f578160200160208202803683370190505b50905060008860c001518a815181106101aa576101aa61189e565b602002602001015151905060008160016101c491906118ca565b6001600160401b038111156101db576101db610ffc565b604051908082528060200260200182016040528015610204578160200160208202803683370190505b50905060005b8281101561027b578a60c001518c815181106102285761022861189e565b602002602001015181815181106102415761024161189e565b602002602001015182828151811061025b5761025b61189e565b6001600160a01b039092166020928302919091019091015260010161020a565b503081838151811061028f5761028f61189e565b60200260200101906001600160a01b031690816001600160a01b031681525050808a60c001518c815181106102c6576102c661189e565b60200260200101819052506000808d6001600160a01b0316631009caf2338e6040518363ffffffff1660e01b8152600401610302929190611a60565b60408051808303816000875af1158015610320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103449190611b78565b91509150818560008151811061035c5761035c61189e565b60200260200101906001600160a01b031690816001600160a01b03168152505080856001815181106103905761039061189e565b60200260200101906001600160a01b031690816001600160a01b0316815250506103ba858c6105a4565b94506103c68a866109d3565b6103d58c608001518a87610c64565b846001815181106103e8576103e861189e565b60200260200101516001600160a01b031663a1e6ab9f8d608001518f815181106104145761041461189e565b6020026020010151306040518363ffffffff1660e01b815260040161043a929190611bb2565b600060405180830381600087803b15801561045457600080fd5b505af1158015610468573d6000803e3d6000fd5b5050505060006002865161047c9190611bdc565b6001600160401b0381111561049357610493610ffc565b6040519080825280602002602001820160405280156104bc578160200160208202803683370190505b50905060005b815181101561052157866104d78260026118ca565b815181106104e7576104e761189e565b60200260200101518282815181106105015761050161189e565b6001600160a01b03909216602092830291909101909101526001016104c2565b507f64f3ddfe41c125867960880cd7a6e05e253a18137a283f8598cda84184fc2521866000815181106105565761055661189e565b6020026020010151876001815181106105715761057161189e565b60200260200101518360405161058993929190611bf3565b60405180910390a150939d9c50505050505050505050505050565b6060600260005b83518110156109ca5760008482815181106105c8576105c861189e565b6020026020010151606001515190506000818684815181106105ec576105ec61189e565b6020026020010151602001515161060391906118ca565b6001600160401b0381111561061a5761061a610ffc565b60405190808252806020026020018201604052801561064d57816020015b60608152602001906001900390816106385790505b50905060005b8281101561075e576106668460026118ca565b8785815181106106785761067861189e565b60200260200101516060015182815181106106955761069561189e565b6020026020010151106106bb5760405163025fe3cd60e21b815260040160405180910390fd5b878785815181106106ce576106ce61189e565b60200260200101516060015182815181106106eb576106eb61189e565b6020026020010151815181106107035761070361189e565b602002602001015160405160200161072a91906001600160a01b0391909116815260200190565b60405160208183030381529060405282828151811061074b5761074b61189e565b6020908102919091010152600101610653565b5060005b8684815181106107745761077461189e565b602002602001015160200151518110156107ef5786848151811061079a5761079a61189e565b60200260200101516020015181815181106107b7576107b761189e565b60200260200101518284836107cc91906118ca565b815181106107dc576107dc61189e565b6020908102919091010152600101610762565b506000808785815181106108055761080561189e565b6020026020010151600001516001600160a01b031688868151811061082c5761082c61189e565b602002602001015160400151846040516024016108499190611c28565b60408051601f198184030181529181526020820180516001600160e01b0316631959b87360e31b1790525161087e9190611c3b565b60006040518083038185875af1925050503d80600081146108bb576040519150601f19603f3d011682016040523d82523d6000602084013e6108c0565b606091505b5091509150816108e357604051637141390560e11b815260040160405180910390fd5b60008886815181106108f7576108f761189e565b6020026020010151608001516001600160401b0381111561091a5761091a610ffc565b604051908082528060200260200182016040528015610943578160200160208202803683370190505b5090508180602001905181019061095a9190611c57565b905060005b81518110156109b85781818151811061097a5761097a61189e565b60200260200101518b89815181106109945761099461189e565b6001600160a01b03909216602092830291909101909101526001978801970161095f565b5050600190940193506105ab92505050565b50929392505050565b8151516000816001600160401b038111156109f0576109f0610ffc565b604051908082528060200260200182016040528015610a19578160200160208202803683370190505b50905060005b82811015610a90578385600001518281518110610a3e57610a3e61189e565b602002602001015181518110610a5657610a5661189e565b6020026020010151828281518110610a7057610a7061189e565b6001600160a01b0390921660209283029190910190910152600101610a1f565b5060008185602001518660400151604051602401610ab093929190611cf0565b60408051601f19818403018152918152602080830180516001600160e01b03166334e7dc6560e11b1790528151600180825281840190935292935060009291908281019080368337505060408051600180825281830190925292935060009291506020808301908036833750506040805160018082528183019092529293506000929150602082015b6060815260200190600190039081610b3957905050905086600181518110610b6357610b6361189e565b602002602001015183600081518110610b7e57610b7e61189e565b60200260200101906001600160a01b031690816001600160a01b031681525050600082600081518110610bb357610bb361189e565b6020026020010181815250508381600081518110610bd357610bd361189e565b602002602001018190525086600081518110610bf157610bf161189e565b60200260200101516001600160a01b031663a516a5bf8484846040518463ffffffff1660e01b8152600401610c2893929190611d29565b600060405180830381600087803b158015610c4257600080fd5b505af1158015610c56573d6000803e3d6000fd5b505050505050505050505050565b81516000816001600160401b03811115610c8057610c80610ffc565b604051908082528060200260200182016040528015610cb357816020015b6060815260200190600190039081610c9e5790505b50905060005b82811015610dd8576000858281518110610cd557610cd561189e565b60200260200101515190506000816001600160401b03811115610cfa57610cfa610ffc565b604051908082528060200260200182016040528015610d23578160200160208202803683370190505b50905060005b82811015610daf5786888581518110610d4457610d4461189e565b60200260200101518281518110610d5d57610d5d61189e565b602002602001015181518110610d7557610d7561189e565b6020026020010151828281518110610d8f57610d8f61189e565b6001600160a01b0390921660209283029190910190910152600101610d29565b5080848481518110610dc357610dc361189e565b60209081029190910101525050600101610cb9565b5060008582604051602401610dee929190611d93565b60408051601f19818403018152918152602080830180516001600160e01b0316632359caf960e01b1790528151600180825281840190935292935060009291908281019080368337505060408051600180825281830190925292935060009291506020808301908036833750506040805160018082528183019092529293506000929150602082015b6060815260200190600190039081610e7757905050905086600181518110610ea157610ea161189e565b602002602001015183600081518110610ebc57610ebc61189e565b60200260200101906001600160a01b031690816001600160a01b031681525050600082600081518110610ef157610ef161189e565b6020026020010181815250508381600081518110610f1157610f1161189e565b602002602001018190525086600081518110610f2f57610f2f61189e565b60200260200101516001600160a01b031663a516a5bf8484846040518463ffffffff1660e01b8152600401610f6693929190611d29565b600060405180830381600087803b158015610f8057600080fd5b505af1158015610f94573d6000803e3d6000fd5b50505050505050505050505050565b600060208284031215610fb557600080fd5b81356001600160e01b031981168114610fcd57600080fd5b9392505050565b6001600160a01b0381168114610fe957600080fd5b50565b8035610ff781610fd4565b919050565b634e487b7160e01b600052604160045260246000fd5b60405161012081016001600160401b038111828210171561103557611035610ffc565b60405290565b60405160a081016001600160401b038111828210171561103557611035610ffc565b604051601f8201601f191681016001600160401b038111828210171561108557611085610ffc565b604052919050565b60006001600160401b038311156110a6576110a6610ffc565b6110b9601f8401601f191660200161105d565b90508281528383830111156110cd57600080fd5b828260208301376000602084830101529392505050565b600082601f8301126110f557600080fd5b610fcd8383356020850161108d565b60006001600160401b0382111561111d5761111d610ffc565b5060051b60200190565b600082601f83011261113857600080fd5b8135602061114d61114883611104565b61105d565b82815260059290921b8401810191818101908684111561116c57600080fd5b8286015b848110156111ab5780356001600160401b0381111561118f5760008081fd5b61119d8986838b01016110e4565b845250918301918301611170565b509695505050505050565b600082601f8301126111c757600080fd5b813560206111d761114883611104565b828152600592831b85018201928282019190878511156111f657600080fd5b8387015b858110156112955780356001600160401b038111156112195760008081fd5b8801603f81018a1361122b5760008081fd5b85810135604061123d61114883611104565b82815291851b8301810191888101908d84111561125a5760008081fd5b938201935b83851015611284578435925061127483610fd4565b828252938901939089019061125f565b8852505050938501935084016111fa565b5090979650505050505050565b600082601f8301126112b357600080fd5b813560206112c361114883611104565b82815260059290921b840181019181810190868411156112e257600080fd5b8286015b848110156111ab5780356001600160401b038111156113055760008081fd5b6113138986838b0101611127565b8452509183019183016112e6565b6000610120828403121561133457600080fd5b61133c611012565b905061134782610fec565b815261135560208301610fec565b602082015261136660408301610fec565b604082015260608201356001600160401b038082111561138557600080fd5b611391858386016110e4565b606084015260808401359150808211156113aa57600080fd5b6113b685838601611127565b608084015260a08401359150808211156113cf57600080fd5b6113db85838601611127565b60a084015260c08401359150808211156113f457600080fd5b611400858386016111b6565b60c084015260e084013591508082111561141957600080fd5b61142585838601611127565b60e08401526101009150818401358181111561144057600080fd5b61144c868287016112a2565b8385015250505092915050565b600082601f83011261146a57600080fd5b8135602061147a61114883611104565b82815260059290921b8401810191818101908684111561149957600080fd5b8286015b848110156111ab578035835291830191830161149d565b600082601f8301126114c557600080fd5b6114d26111488335611104565b82358082526020808301929160051b850101858111156114f157600080fd5b602085015b8181101561164a576001600160401b03808235111561151457600080fd5b8135870160a0818a03601f1901121561152c57600080fd5b61153461103b565b6115416020830135610fd4565b60208201358152826040830135111561155957600080fd5b604082013582018a603f82011261156f57600080fd5b61157f6111486020830135611104565b602082810135808352908201919060051b83016040018d8111156115a257600080fd5b604084015b818110156115f35787813511156115bd57600080fd5b8e605f8235870101126115cf57600080fd5b6115e58f8235870160408101359060600161108d565b8452602093840193016115a7565b50506020840152505060608201356040820152608082013583101561161757600080fd5b61162a8a60206080850135850101611459565b606082015260a091909101356080820152855250602093840193016114f6565b509095945050505050565b60006060828403121561166757600080fd5b604051606081016001600160401b03828210818311171561168a5761168a610ffc565b8160405282935084359150808211156116a257600080fd5b6116ae86838701611459565b835260208501359150808211156116c457600080fd5b6116d086838701611127565b602084015260408501359150808211156116e957600080fd5b506116f6858286016112a2565b6040830152505092915050565b600082601f83011261171457600080fd5b8135602061172461114883611104565b82815260059290921b8401810191818101908684111561174357600080fd5b8286015b848110156111ab5780356001600160401b038111156117665760008081fd5b6117748986838b0101611459565b845250918301918301611747565b60008060008060008060c0878903121561179b57600080fd5b6117a487610fec565b95506020870135945060408701356001600160401b03808211156117c757600080fd5b6117d38a838b01611321565b955060608901359150808211156117e957600080fd5b6117f58a838b016114b4565b9450608089013591508082111561180b57600080fd5b6118178a838b01611655565b935060a089013591508082111561182d57600080fd5b5061183a89828a01611703565b9150509295509295509295565b600081518084526020808501945080840160005b838110156118805781516001600160a01b03168752958201959082019060010161185b565b509495945050505050565b602081526000610fcd6020830184611847565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156118dd576118dd6118b4565b500190565b60005b838110156118fd5781810151838201526020016118e5565b8381111561190c576000848401525b50505050565b6000815180845261192a8160208601602086016118e2565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015611986578284038952611974848351611912565b9885019893509084019060010161195c565b5091979650505050505050565b600081518084526020808501808196508360051b810191508286016000805b86811015611a0a578385038a52825180518087529087019087870190845b818110156119f55783516001600160a01b0316835292890192918901916001016119d0565b50509a87019a955050918501916001016119b2565b509298975050505050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015611986578284038952611a4e84835161193e565b98850198935090840190600101611a36565b6001600160a01b03831681526040602082018190528251611a8b918301906001600160a01b03169052565b60006020830151611aa760608401826001600160a01b03169052565b5060408301516001600160a01b03166080830152606083015161012060a08401819052611ad8610160850183611912565b91506080850151603f19808685030160c0870152611af6848361193e565b935060a08701519150808685030160e0870152611b13848361193e565b935060c08701519150610100818786030181880152611b328584611993565b945060e08801519250818786030184880152611b4e858461193e565b94508088015193505080868503016101408701525050611b6e8282611a18565b9695505050505050565b60008060408385031215611b8b57600080fd5b8251611b9681610fd4565b6020840151909250611ba781610fd4565b809150509250929050565b604081526000611bc56040830185611912565b905060018060a01b03831660208301529392505050565b600082821015611bee57611bee6118b4565b500390565b6001600160a01b03848116825283166020820152606060408201819052600090611c1f90830184611847565b95945050505050565b602081526000610fcd602083018461193e565b60008251611c4d8184602087016118e2565b9190910192915050565b60006020808385031215611c6a57600080fd5b82516001600160401b03811115611c8057600080fd5b8301601f81018513611c9157600080fd5b8051611c9f61114882611104565b81815260059190911b82018301908381019087831115611cbe57600080fd5b928401925b82841015611ce5578351611cd681610fd4565b82529284019290840190611cc3565b979650505050505050565b606081526000611d036060830186611847565b8281036020840152611d15818661193e565b90508281036040840152611b6e8185611a18565b606081526000611d3c6060830186611847565b82810360208481019190915285518083528682019282019060005b81811015611d7357845183529383019391830191600101611d57565b50508481036040860152611d87818761193e565b98975050505050505050565b604081526000611da6604083018561193e565b8281036020840152611c1f818561199356fea26469706673582212200b0344077085d4770ec3ecb961872897a5c27d16aa5ded98665cccb8e0f46d9e64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806301ffc9a71461003b578063304a83ee14610063575b600080fd5b61004e610049366004610fa3565b610083565b60405190151581526020015b60405180910390f35b610076610071366004611782565b6100ba565b60405161005a919061188b565b60006001600160e01b0319821663182541f760e11b14806100b457506301ffc9a760e01b6001600160e01b03198316145b92915050565b6020820151518251516060911415806100da575060408301515183515114155b806100eb5750815185608001515114155b15610109576040516311e86f7360e01b815260040160405180910390fd5b8351600260005b8281101561014b5786818151811061012a5761012a61189e565b6020026020010151608001518261014191906118ca565b9150600101610110565b506000816001600160401b0381111561016657610166610ffc565b60405190808252806020026020018201604052801561018f578160200160208202803683370190505b50905060008860c001518a815181106101aa576101aa61189e565b602002602001015151905060008160016101c491906118ca565b6001600160401b038111156101db576101db610ffc565b604051908082528060200260200182016040528015610204578160200160208202803683370190505b50905060005b8281101561027b578a60c001518c815181106102285761022861189e565b602002602001015181815181106102415761024161189e565b602002602001015182828151811061025b5761025b61189e565b6001600160a01b039092166020928302919091019091015260010161020a565b503081838151811061028f5761028f61189e565b60200260200101906001600160a01b031690816001600160a01b031681525050808a60c001518c815181106102c6576102c661189e565b60200260200101819052506000808d6001600160a01b0316631009caf2338e6040518363ffffffff1660e01b8152600401610302929190611a60565b60408051808303816000875af1158015610320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103449190611b78565b91509150818560008151811061035c5761035c61189e565b60200260200101906001600160a01b031690816001600160a01b03168152505080856001815181106103905761039061189e565b60200260200101906001600160a01b031690816001600160a01b0316815250506103ba858c6105a4565b94506103c68a866109d3565b6103d58c608001518a87610c64565b846001815181106103e8576103e861189e565b60200260200101516001600160a01b031663a1e6ab9f8d608001518f815181106104145761041461189e565b6020026020010151306040518363ffffffff1660e01b815260040161043a929190611bb2565b600060405180830381600087803b15801561045457600080fd5b505af1158015610468573d6000803e3d6000fd5b5050505060006002865161047c9190611bdc565b6001600160401b0381111561049357610493610ffc565b6040519080825280602002602001820160405280156104bc578160200160208202803683370190505b50905060005b815181101561052157866104d78260026118ca565b815181106104e7576104e761189e565b60200260200101518282815181106105015761050161189e565b6001600160a01b03909216602092830291909101909101526001016104c2565b507f64f3ddfe41c125867960880cd7a6e05e253a18137a283f8598cda84184fc2521866000815181106105565761055661189e565b6020026020010151876001815181106105715761057161189e565b60200260200101518360405161058993929190611bf3565b60405180910390a150939d9c50505050505050505050505050565b6060600260005b83518110156109ca5760008482815181106105c8576105c861189e565b6020026020010151606001515190506000818684815181106105ec576105ec61189e565b6020026020010151602001515161060391906118ca565b6001600160401b0381111561061a5761061a610ffc565b60405190808252806020026020018201604052801561064d57816020015b60608152602001906001900390816106385790505b50905060005b8281101561075e576106668460026118ca565b8785815181106106785761067861189e565b60200260200101516060015182815181106106955761069561189e565b6020026020010151106106bb5760405163025fe3cd60e21b815260040160405180910390fd5b878785815181106106ce576106ce61189e565b60200260200101516060015182815181106106eb576106eb61189e565b6020026020010151815181106107035761070361189e565b602002602001015160405160200161072a91906001600160a01b0391909116815260200190565b60405160208183030381529060405282828151811061074b5761074b61189e565b6020908102919091010152600101610653565b5060005b8684815181106107745761077461189e565b602002602001015160200151518110156107ef5786848151811061079a5761079a61189e565b60200260200101516020015181815181106107b7576107b761189e565b60200260200101518284836107cc91906118ca565b815181106107dc576107dc61189e565b6020908102919091010152600101610762565b506000808785815181106108055761080561189e565b6020026020010151600001516001600160a01b031688868151811061082c5761082c61189e565b602002602001015160400151846040516024016108499190611c28565b60408051601f198184030181529181526020820180516001600160e01b0316631959b87360e31b1790525161087e9190611c3b565b60006040518083038185875af1925050503d80600081146108bb576040519150601f19603f3d011682016040523d82523d6000602084013e6108c0565b606091505b5091509150816108e357604051637141390560e11b815260040160405180910390fd5b60008886815181106108f7576108f761189e565b6020026020010151608001516001600160401b0381111561091a5761091a610ffc565b604051908082528060200260200182016040528015610943578160200160208202803683370190505b5090508180602001905181019061095a9190611c57565b905060005b81518110156109b85781818151811061097a5761097a61189e565b60200260200101518b89815181106109945761099461189e565b6001600160a01b03909216602092830291909101909101526001978801970161095f565b5050600190940193506105ab92505050565b50929392505050565b8151516000816001600160401b038111156109f0576109f0610ffc565b604051908082528060200260200182016040528015610a19578160200160208202803683370190505b50905060005b82811015610a90578385600001518281518110610a3e57610a3e61189e565b602002602001015181518110610a5657610a5661189e565b6020026020010151828281518110610a7057610a7061189e565b6001600160a01b0390921660209283029190910190910152600101610a1f565b5060008185602001518660400151604051602401610ab093929190611cf0565b60408051601f19818403018152918152602080830180516001600160e01b03166334e7dc6560e11b1790528151600180825281840190935292935060009291908281019080368337505060408051600180825281830190925292935060009291506020808301908036833750506040805160018082528183019092529293506000929150602082015b6060815260200190600190039081610b3957905050905086600181518110610b6357610b6361189e565b602002602001015183600081518110610b7e57610b7e61189e565b60200260200101906001600160a01b031690816001600160a01b031681525050600082600081518110610bb357610bb361189e565b6020026020010181815250508381600081518110610bd357610bd361189e565b602002602001018190525086600081518110610bf157610bf161189e565b60200260200101516001600160a01b031663a516a5bf8484846040518463ffffffff1660e01b8152600401610c2893929190611d29565b600060405180830381600087803b158015610c4257600080fd5b505af1158015610c56573d6000803e3d6000fd5b505050505050505050505050565b81516000816001600160401b03811115610c8057610c80610ffc565b604051908082528060200260200182016040528015610cb357816020015b6060815260200190600190039081610c9e5790505b50905060005b82811015610dd8576000858281518110610cd557610cd561189e565b60200260200101515190506000816001600160401b03811115610cfa57610cfa610ffc565b604051908082528060200260200182016040528015610d23578160200160208202803683370190505b50905060005b82811015610daf5786888581518110610d4457610d4461189e565b60200260200101518281518110610d5d57610d5d61189e565b602002602001015181518110610d7557610d7561189e565b6020026020010151828281518110610d8f57610d8f61189e565b6001600160a01b0390921660209283029190910190910152600101610d29565b5080848481518110610dc357610dc361189e565b60209081029190910101525050600101610cb9565b5060008582604051602401610dee929190611d93565b60408051601f19818403018152918152602080830180516001600160e01b0316632359caf960e01b1790528151600180825281840190935292935060009291908281019080368337505060408051600180825281830190925292935060009291506020808301908036833750506040805160018082528183019092529293506000929150602082015b6060815260200190600190039081610e7757905050905086600181518110610ea157610ea161189e565b602002602001015183600081518110610ebc57610ebc61189e565b60200260200101906001600160a01b031690816001600160a01b031681525050600082600081518110610ef157610ef161189e565b6020026020010181815250508381600081518110610f1157610f1161189e565b602002602001018190525086600081518110610f2f57610f2f61189e565b60200260200101516001600160a01b031663a516a5bf8484846040518463ffffffff1660e01b8152600401610f6693929190611d29565b600060405180830381600087803b158015610f8057600080fd5b505af1158015610f94573d6000803e3d6000fd5b50505050505050505050505050565b600060208284031215610fb557600080fd5b81356001600160e01b031981168114610fcd57600080fd5b9392505050565b6001600160a01b0381168114610fe957600080fd5b50565b8035610ff781610fd4565b919050565b634e487b7160e01b600052604160045260246000fd5b60405161012081016001600160401b038111828210171561103557611035610ffc565b60405290565b60405160a081016001600160401b038111828210171561103557611035610ffc565b604051601f8201601f191681016001600160401b038111828210171561108557611085610ffc565b604052919050565b60006001600160401b038311156110a6576110a6610ffc565b6110b9601f8401601f191660200161105d565b90508281528383830111156110cd57600080fd5b828260208301376000602084830101529392505050565b600082601f8301126110f557600080fd5b610fcd8383356020850161108d565b60006001600160401b0382111561111d5761111d610ffc565b5060051b60200190565b600082601f83011261113857600080fd5b8135602061114d61114883611104565b61105d565b82815260059290921b8401810191818101908684111561116c57600080fd5b8286015b848110156111ab5780356001600160401b0381111561118f5760008081fd5b61119d8986838b01016110e4565b845250918301918301611170565b509695505050505050565b600082601f8301126111c757600080fd5b813560206111d761114883611104565b828152600592831b85018201928282019190878511156111f657600080fd5b8387015b858110156112955780356001600160401b038111156112195760008081fd5b8801603f81018a1361122b5760008081fd5b85810135604061123d61114883611104565b82815291851b8301810191888101908d84111561125a5760008081fd5b938201935b83851015611284578435925061127483610fd4565b828252938901939089019061125f565b8852505050938501935084016111fa565b5090979650505050505050565b600082601f8301126112b357600080fd5b813560206112c361114883611104565b82815260059290921b840181019181810190868411156112e257600080fd5b8286015b848110156111ab5780356001600160401b038111156113055760008081fd5b6113138986838b0101611127565b8452509183019183016112e6565b6000610120828403121561133457600080fd5b61133c611012565b905061134782610fec565b815261135560208301610fec565b602082015261136660408301610fec565b604082015260608201356001600160401b038082111561138557600080fd5b611391858386016110e4565b606084015260808401359150808211156113aa57600080fd5b6113b685838601611127565b608084015260a08401359150808211156113cf57600080fd5b6113db85838601611127565b60a084015260c08401359150808211156113f457600080fd5b611400858386016111b6565b60c084015260e084013591508082111561141957600080fd5b61142585838601611127565b60e08401526101009150818401358181111561144057600080fd5b61144c868287016112a2565b8385015250505092915050565b600082601f83011261146a57600080fd5b8135602061147a61114883611104565b82815260059290921b8401810191818101908684111561149957600080fd5b8286015b848110156111ab578035835291830191830161149d565b600082601f8301126114c557600080fd5b6114d26111488335611104565b82358082526020808301929160051b850101858111156114f157600080fd5b602085015b8181101561164a576001600160401b03808235111561151457600080fd5b8135870160a0818a03601f1901121561152c57600080fd5b61153461103b565b6115416020830135610fd4565b60208201358152826040830135111561155957600080fd5b604082013582018a603f82011261156f57600080fd5b61157f6111486020830135611104565b602082810135808352908201919060051b83016040018d8111156115a257600080fd5b604084015b818110156115f35787813511156115bd57600080fd5b8e605f8235870101126115cf57600080fd5b6115e58f8235870160408101359060600161108d565b8452602093840193016115a7565b50506020840152505060608201356040820152608082013583101561161757600080fd5b61162a8a60206080850135850101611459565b606082015260a091909101356080820152855250602093840193016114f6565b509095945050505050565b60006060828403121561166757600080fd5b604051606081016001600160401b03828210818311171561168a5761168a610ffc565b8160405282935084359150808211156116a257600080fd5b6116ae86838701611459565b835260208501359150808211156116c457600080fd5b6116d086838701611127565b602084015260408501359150808211156116e957600080fd5b506116f6858286016112a2565b6040830152505092915050565b600082601f83011261171457600080fd5b8135602061172461114883611104565b82815260059290921b8401810191818101908684111561174357600080fd5b8286015b848110156111ab5780356001600160401b038111156117665760008081fd5b6117748986838b0101611459565b845250918301918301611747565b60008060008060008060c0878903121561179b57600080fd5b6117a487610fec565b95506020870135945060408701356001600160401b03808211156117c757600080fd5b6117d38a838b01611321565b955060608901359150808211156117e957600080fd5b6117f58a838b016114b4565b9450608089013591508082111561180b57600080fd5b6118178a838b01611655565b935060a089013591508082111561182d57600080fd5b5061183a89828a01611703565b9150509295509295509295565b600081518084526020808501945080840160005b838110156118805781516001600160a01b03168752958201959082019060010161185b565b509495945050505050565b602081526000610fcd6020830184611847565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156118dd576118dd6118b4565b500190565b60005b838110156118fd5781810151838201526020016118e5565b8381111561190c576000848401525b50505050565b6000815180845261192a8160208601602086016118e2565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015611986578284038952611974848351611912565b9885019893509084019060010161195c565b5091979650505050505050565b600081518084526020808501808196508360051b810191508286016000805b86811015611a0a578385038a52825180518087529087019087870190845b818110156119f55783516001600160a01b0316835292890192918901916001016119d0565b50509a87019a955050918501916001016119b2565b509298975050505050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015611986578284038952611a4e84835161193e565b98850198935090840190600101611a36565b6001600160a01b03831681526040602082018190528251611a8b918301906001600160a01b03169052565b60006020830151611aa760608401826001600160a01b03169052565b5060408301516001600160a01b03166080830152606083015161012060a08401819052611ad8610160850183611912565b91506080850151603f19808685030160c0870152611af6848361193e565b935060a08701519150808685030160e0870152611b13848361193e565b935060c08701519150610100818786030181880152611b328584611993565b945060e08801519250818786030184880152611b4e858461193e565b94508088015193505080868503016101408701525050611b6e8282611a18565b9695505050505050565b60008060408385031215611b8b57600080fd5b8251611b9681610fd4565b6020840151909250611ba781610fd4565b809150509250929050565b604081526000611bc56040830185611912565b905060018060a01b03831660208301529392505050565b600082821015611bee57611bee6118b4565b500390565b6001600160a01b03848116825283166020820152606060408201819052600090611c1f90830184611847565b95945050505050565b602081526000610fcd602083018461193e565b60008251611c4d8184602087016118e2565b9190910192915050565b60006020808385031215611c6a57600080fd5b82516001600160401b03811115611c8057600080fd5b8301601f81018513611c9157600080fd5b8051611c9f61114882611104565b81815260059190911b82018301908381019087831115611cbe57600080fd5b928401925b82841015611ce5578351611cd681610fd4565b82529284019290840190611cc3565b979650505050505050565b606081526000611d036060830186611847565b8281036020840152611d15818661193e565b90508281036040840152611b6e8185611a18565b606081526000611d3c6060830186611847565b82810360208481019190915285518083528682019282019060005b81811015611d7357845183529383019391830191600101611d57565b50508481036040860152611d87818761193e565b98975050505050505050565b604081526000611da6604083018561193e565b8281036020840152611c1f818561199356fea26469706673582212200b0344077085d4770ec3ecb961872897a5c27d16aa5ded98665cccb8e0f46d9e64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createDAOAndModules(address,uint256,(address,address,address,string,string[],string[],address[][],string[],string[][]),(address,bytes[],uint256,uint256[],uint256)[],(uint256[],string[],string[][]),uint256[][])": {
        "params": {
          "createDAOParams": "The struct of parameters used for creating the DAO and Access Control contracts",
          "daoFactory": "The address of the DAO factory",
          "metaFactoryTempRoleIndex": "The index of which role specified in createDAOParams should be temporarily given to the MetaFactory",
          "moduleActionData": "Struct of functionDescs and roles to setup for each newly created module",
          "moduleFactoriesCallData": "The calldata required for each module factory call",
          "roleModuleMembers": "Array of which newly created modules should be given each role"
        },
        "returns": {
          "_0": "Array of addresses of the newly created modules"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "An interface ID bytes4 as defined by ERC-165"
        },
        "returns": {
          "_0": "bool Indicates whether the interface is supported"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createDAOAndModules(address,uint256,(address,address,address,string,string[],string[],address[][],string[],string[][]),(address,bytes[],uint256,uint256[],uint256)[],(uint256[],string[],string[][]),uint256[][])": {
        "notice": "Creates a DAO, Access Control, and any modules specified"
      },
      "supportsInterface(bytes4)": {
        "notice": "Returns whether a given interface ID is supported"
      }
    },
    "notice": "A factory contract for deploying DAOs along with any desired modules within one transaction",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}